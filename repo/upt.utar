{
  [ "/bin" ] = true,
  [ "/PKGINFO.lua" ] = "DEPENDS = {\"uberkernel\", \"corelib\"}\
VERSION = {0, 2, 1}",
  [ "/bin/upt" ] = "local P={...}lua.include(\"luamin\")if#P<1 then\
error(\"Usage: upt install|remove|get|get-install|update|upgrade\")end\
local function XB(AW,DR)local EO,Q\
if not DR and\
fs.exists(\"/var/lib/upt/\"..AW)then\
local H=fs.open(\"/var/lib/upt/\"..AW,\"r\")EO=string.split(H.readLine(),\" \")\
Q=string.split(H.readLine(),\";\")H.close()return EO,Q end;local IV=fs.open(\"/var/lib/upt/database\",\"r\")\
for CA,BY in\
pairs(string.split(IV.readAll(),\"\\n\"))do local TV=string.split(BY,\" \")Q=string.split(TV[2],\";\")\
EO=string.split(TV[3],\";\")if TV[1]==AW then break end end;IV.close()return EO,Q end\
function listDeps(PN,PS)XB(PN)local B={}for EK,OO in pairs(DEPENDS)do\
if notisntalled then\
if not\
fs.exists(\"/var/lib/upt/\"..OO)then table.insert(B,OO)end else table.insert(B,OO)end end\
return B end\
local function IF(GLQ,PGF)local CC=fs.list(GLQ)\
for FY,U in pairs(CC)do\
if fs.isDir(GLQ..\"/\"..U)then if\
fs.exists(PGF..\"/\"..U)then else fs.makeDir(PGF..\"/\"..U)end;IF(GLQ..\
\"/\"..U,PGF..\"/\"..U)else if\
fs.exists(PGF..\"/\"..U)then fs.delete(PGF..\"/\"..U)end;fs.copy(GLQ..\
\"/\"..U,PGF..\"/\"..U)end end end\
local function O()local H=fs.list(\"/var/lib/upt\")local XQ={}for V,T in pairs(H)do\
if T==\"database\"then else XQ[T]=true end end;return XQ end\
local function OG(RZ,OC)\
if not OC then OC={}for ZE,QH in pairs(RZ)do OC[QH]=true end end;for i=1,#RZ do DEPENDS,VERSION=XB(RZ[i])\
for FN,JF in pairs(DEPENDS)do if\
O()[JF]or OC[JF]or JF==\"\"then else OC[JF]=true;OG({JF},OC)end end end\
return OC end\
local function II(OR,WS)if not fs.exists(\"/var/lib/upt/database\")then\
error(\"Database not found. Run 'upt update' to download it.\")end\
local S=shell.dir()\
for i=1,#OR do\
if fs.exists(\"/usr/pkg/\"..OR[i])then\
IF(\"/usr/pkg/\"..OR[i],\"\")DEPENDS,VERSION=XB(OR[i])\
local Z=fs.recursList(\"/usr/pkg/\"..OR[i])local NY=fs.open(\"/var/lib/upt/\"..OR[i],\"w\")\
NY.writeLine(table.concat(DEPENDS,\" \"))NY.writeLine(table.concat(VERSION,\";\"))\
for j=#Z,1,-1\
do local YV=fsd.stripPath(\"/usr/pkg/\"..OR[i],Z[j])if not\
fs.isDir(YV)then NY.write(YV..\"\\n\")end end;NY.write(\"//DIRLIST\\n\")\
for j=#Z,1,-1 do\
local ZDU=fsd.stripPath(\"/usr/pkg/\"..OR[i],Z[j])if fs.isDir(ZDU)then NY.write(ZDU..\"\\n\")end end;NY.close()\
print(\"Package \"..OR[i]..\" installed from /usr/pkg\")return end\
if not fs.exists(\"/usr/src/\"..OR[i])then error(\"Package \"..\
OR[i]..\" not found!\")end;print(\"Building package \"..OR[i])shell.setDir(\
\"/usr/src/\"..OR[i])shell.run(\"/usr/src/\"..\
OR[i]..\"/PKGINFO.lua\")\
if not WS then\
print(\"Checking dependencies...\")for C,J in pairs(DEPENDS)do if not fs.exists(\"/var/lib/upt/\"..J)then\
error(\
\"Dependency \"..J..\" not satisfied!\")end\
print(\"Dependency \"..J..\" ok\")end\
print(\"All dependencies satisfied\")end\
shell.run(\"/usr/src/\"..OR[i]..\"/Build.lua\")fs.makeDir(\"/tmp/\"..OR[i])\
print(\"Installing package \"..OR[i])\
shell.run(\"/usr/src/\"..OR[i]..\"/Build.lua install /tmp/\"..OR[i])\
shell.run(\"/usr/src/\"..OR[i]..\"/Build.lua install\")print(\"Registring package \"..OR[i])local GNU=fs.recursList(\
\"/tmp/\"..OR[i])\
local I=fs.open(\"/var/lib/upt/\"..OR[i],\"w\")I.writeLine(table.concat(DEPENDS,\" \"))\
I.writeLine(table.concat(VERSION,\";\"))\
for j=#GNU,1,-1 do local HW=fsd.stripPath(\"/tmp/\"..OR[i],GNU[j])if not\
fs.isDir(HW)then I.write(HW..\"\\n\")end end;I.write(\"//DIRLIST\\n\")\
for j=#GNU,1,-1 do\
local L=fsd.stripPath(\"/tmp/\"..OR[i],GNU[j])if fs.isDir(L)then I.write(L..\"\\n\")end end;I.close()fs.delete(\"/tmp/\"..OR[i])print(\"Installing package \"..OR[i]..\
\" done!\")end;shell.setDir(S)end\
local function QW(IE)if not fs.exists(\"/var/lib/upt/database\")then\
error(\"Database not found. Run 'upt update' to download it.\")end\
for i=1,#IE do if not\
fs.exists(\"/var/lib/upt/\"..IE[i])then\
error(\"Package \"..IE[i]..\" not found!\")end\
print(\"Removing package \"..IE[i])local FM=fs.open(\"/var/lib/upt/\"..IE[i],\"r\")\
FM.readLine()FM.readLine()local W=FM.readLine()local LY=false\
while W do if W==\"//DIRLIST\"then\
W=FM.readLine()LY=true;if not W then break end end\
if not LY then\
fs.delete(W)else if#fs.list(W)==0 then fs.delete(W)end end;W=FM.readLine()end;FM.close()\
fs.delete(\"/var/lib/upt/\"..IE[i])\
print(\"Removing package \"..IE[i]..\" done!\")end end\
local function HZ()print(\"Updating package list...\")\
local PB=http.get(\"https://raw.githubusercontent.com/TsarN/uber-os/master/repo/repo.db\")\
if not PB then error(\"Failed to get package list!\")end;local IS=fs.open(\"/var/lib/upt/database\",\"w\")\
IS.write(PB.readAll())PB.close()IS.close()print(\"Package list updated\")end\
local function UW(JY)if not fs.exists(\"/var/lib/upt/database\")then\
error(\"Database not found. Run 'upt update' to download it.\")end;if not http then\
error(\"Http API not enabled\")end;local EN;if\
not fs.exists(\"/var/lib/upt/database\")then HZ()end\
local B=fs.open(\"/var/lib/upt/database\",\"r\")EN=string.split(B.readAll(),\"\\n\")for T,Z in pairs(EN)do\
EN[T]=string.split(Z,\" \")[1]end;B.close()\
for i=1,#JY do local JH=true;for H,SC in pairs(EN)do if JY[i]==SC then\
JH=false end end;if JH then\
error(\"Package not found!\")end\
print(\"Downloading package \"..JY[i])\
local OZ=http.get(\"https://raw.githubusercontent.com/TsarN/uber-os/master/repo/\"..JY[i]..\".utar\")if not OZ then\
error(\"Failed to download \"..\
JY[i]..\"! Make sure, that you have raw.githubusercontent.com whitelisted or try again later.\")end;print(\
\"Saving package \"..JY[i])\
local ZO=fs.open(\"/tmp/\"..JY[i],\"w\")ZO.write(OZ.readAll())ZO.close()OZ.close()print(\
\"Unpacking package \"..JY[i])\
lua.include(\"libarchive\")if fs.exists(\"/usr/pkg/\"..JY[i])then\
fs.delete(\"/usr/pkg/\"..JY[i])end\
fs.makeDir(\"/usr/pkg/\"..JY[i])\
archive.unpack(\"/tmp/\"..JY[i],\"/usr/pkg/\"..JY[i])fs.delete(\"/tmp/\"..JY[i])\
print(\"Downloading package \"..JY[i]..\" done!\")end end\
local function G(FH)if not fs.exists(\"/var/lib/upt/database\")then\
error(\"Database not found. Run 'upt update' to download it.\")end\
local DZ=fs.open(\"/var/lib/upt/database\",\"r\")pkglist=string.split(DZ.readAll(),\"\\n\")for RA,N in pairs(pkglist)do\
pkglist[RA]=string.split(N,\" \")[1]end;DZ.close()\
for i=1,#FH do local Z=true;for PF,I in pairs(pkglist)do if\
FH[i]==I then Z=false end end;if Z then\
error(\"Package not found!\")end end;print(\"Building dependency tree...\")local RO=OG(FH)\
print(\"Following packages will be installed/upgraded:\")\
for E,QZ in pairs(RO)do write(E..\":\")DEPENDS,VERSION=XB(E,true)write(\
table.concat(VERSION,\".\")..\" \")end;print()write(\"Confirm? [Y/n]: \")local NY=read()if\
NY==\"n\"or NY==\"N\"then return end;for JK,OY in pairs(RO)do UW({JK})end;for KI,WB in pairs(RO)do\
II({KI},true)end end\
local function PMP()local NQ=O()local VF={}\
for OP,SS in pairs(NQ)do DEPENDS1,VERSION1=XB(OP,true)\
DEPENDS,VERSION=XB(OP)local U=false\
for i=1,3 do if VERSION1[i]>VERSION[i]then U=true;break end end;if U then table.insert(VF,OP)end end;G(VF)end;local Y={}for i=2,#P do table.insert(Y,P[i])end\
if P[1]==\"install\"then if#P<\
2 then\
error(\"Usage: upt install <package1> [package2] ...\")end;II(Y)end;if P[1]==\"update\"then HZ()end;if P[1]==\"upgrade\"then PMP()end\
if P[1]==\
\"remove\"then if#P<2 then\
error(\"Usage: upt remove <package1> [package2] ...\")end;QW(Y)end\
if P[1]==\"get\"then if#P<2 then\
error(\"Usage: upt get <package1> [package2] ...\")end;UW(Y)end\
if P[1]==\"get-install\"then if#P<2 then\
error(\"Usage: upt get-install <package1> [package2] ...\")end;G(Y)end",
}