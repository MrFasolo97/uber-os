{
  [ "/bin" ] = true,
  [ "/PKGINFO.lua" ] = "DEPENDS = {\"uberkernel\", \"corelib\", \"luamin\", \"libjson\"}\
VERSION = {0, 2, 1}",
  [ "/bin/upt" ] = "local QW={...}lua.include(\"luamin\")if#QW<1 then\
error(\"Usage: upt install|remove|get|get-install\")end\
function listDeps(GK,KZ)\
if\
fs.exists(\"/usr/src/\"..GK..\"/PKGINFO.lua\")then\
shell.run(\"/usr/src/\"..GK..\"/PKGINFO.lua\")elseif fs.exists(\"/usr/pkg/\"..GK..\"/PKGINFO.lua\")then\
shell.run(\
\"/usr/pkg/\"..GK..\"/PKGINFO.lua\")else local AI=fs.open(\"/var/lib/upt/\"..GK,\"r\")\
DEPENDS=string.split(AI.readLine(),\" \")AI.close()end;local XN={}\
for FN,C in pairs(DEPENDS)do if notisntalled then if\
not fs.exists(\"/var/lib/upt/\"..C)then table.insert(XN,C)end else\
table.insert(XN,C)end end;return XN end\
local function F(ET,Q)local CR=fs.list(ET)\
for UL,G in pairs(CR)do\
if Q==\"\"and G==\"PKGINFO.lua\"then else\
if\
fs.isDir(ET..\"/\"..G)then\
if fs.exists(Q..\"/\"..G)then else fs.makeDir(Q..\"/\"..G)end;F(ET..\"/\"..G,Q..\"/\"..G)else if fs.exists(Q..\"/\"..G)then fs.delete(\
Q..\"/\"..G)end;fs.copy(ET..\"/\"..G,Q..\
\"/\"..G)end end end end\
local function N(VZ)local M=shell.dir()\
for i=1,#VZ do\
if fs.exists(\"/usr/pkg/\"..VZ[i])then\
F(\"/usr/pkg/\"..VZ[i],\"\")\
shell.run(\"/usr/pkg/\"..VZ[i]..\"/PKGINFO.lua\")local H=fs.recursList(\"/usr/pkg/\"..VZ[i])local VS=fs.open(\"/var/lib/upt/\"..\
VZ[i],\"w\")\
VS.writeLine(table.concat(DEPENDS,\" \"))VS.writeLine(table.concat(VERSION,\".\"))\
for j=#H,1,-1\
do local PA=fsd.stripPath(\"/tmp/\"..VZ[i],H[j])if not\
fs.isDir(PA)then VS.write(PA..\"\\n\")end end;VS.write(\"//DIRLIST\\n\")\
for j=#H,1,-1 do\
local X=fsd.stripPath(\"/tmp/\"..VZ[i],H[j])if fs.isDir(X)then VS.write(X..\"\\n\")end end;VS.close()\
print(\"Package \"..VZ[i]..\" installed from /usr/pkg\")return end\
if not fs.exists(\"/usr/src/\"..VZ[i])then error(\"Package \"..\
VZ[i]..\" not found!\")end;print(\"Building package \"..VZ[i])shell.setDir(\
\"/usr/src/\"..VZ[i])shell.run(\"/usr/src/\"..\
VZ[i]..\"/PKGINFO.lua\")\
print(\"Checking dependencies...\")for CO,V in pairs(DEPENDS)do if not fs.exists(\"/var/lib/upt/\"..V)then\
error(\
\"Dependency \"..V..\" not satisfied!\")end\
print(\"Dependency \"..V..\" ok\")end\
print(\"All dependencies satisfied\")\
shell.run(\"/usr/src/\"..VZ[i]..\"/Build.lua\")fs.makeDir(\"/tmp/\"..VZ[i])\
print(\"Installing package \"..VZ[i])\
shell.run(\"/usr/src/\"..VZ[i]..\"/Build.lua install /tmp/\"..VZ[i])\
shell.run(\"/usr/src/\"..VZ[i]..\"/Build.lua install\")print(\"Registring package \"..VZ[i])local NMG=fs.recursList(\
\"/tmp/\"..VZ[i])\
local NAR=fs.open(\"/var/lib/upt/\"..VZ[i],\"w\")NAR.writeLine(table.concat(DEPENDS,\" \"))\
NAR.writeLine(table.concat(VERSION,\".\"))\
for j=#NMG,1,-1 do local I=fsd.stripPath(\"/tmp/\"..VZ[i],NMG[j])if not\
fs.isDir(I)then NAR.write(I..\"\\n\")end end;NAR.write(\"//DIRLIST\\n\")\
for j=#NMG,1,-1 do\
local ZI=fsd.stripPath(\"/tmp/\"..VZ[i],NMG[j])if fs.isDir(ZI)then NAR.write(ZI..\"\\n\")end end;NAR.close()fs.delete(\"/tmp/\"..VZ[i])\
print(\"Installing package \"..\
VZ[i]..\" done!\")end;shell.setDir(M)end\
local function U(FT)\
for i=1,#FT do\
if not fs.exists(\"/var/lib/upt/\"..FT[i])then error(\"Package \"..\
FT[i]..\" not found!\")end;print(\"Removing package \"..FT[i])local OU=fs.open(\"/var/lib/upt/\"..\
FT[i],\"r\")OU.readLine()\
OU.readLine()local X=OU.readLine()local KS=false\
while X do if X==\"//DIRLIST\"then X=OU.readLine()KS=true;if\
not X then break end end\
if not KS then fs.delete(X)else if#\
fs.list(X)==0 then fs.delete(X)end end;X=OU.readLine()end;OU.close()\
fs.delete(\"/var/lib/upt/\"..FT[i])\
print(\"Removing package \"..FT[i]..\" done!\")end end\
local function NM()print(\"Updating package list...\")\
local T=http.get(\"https://raw.githubusercontent.com/TsarN/uber-os/master/repo/repo.db\")\
if not T then error(\"Failed to get package list!\")end;local OS=fs.open(\"/var/lib/upt/database\",\"r\")\
OS.write(T.readAll())T.close()OS.close()print(\"Package list updated\")end\
local function Y(MD)lua.include(\"libjson\")if not http then\
error(\"Http API not enabled\")end;local PH;if\
not fs.exists(\"/var/lib/upt/database\")then NM()end\
local VF=fs.open(\"/var/lib/upt/database\",\"r\")PH=string.split(VF.readAll(),\"\\n\")VF.close()\
for i=1,#MD do\
local ZS=true;for VG,W in pairs(PH)do if MD[i]==W then ZS=false end end;if ZS then\
error(\"Package not found!\")end\
print(\"Downloading package \"..MD[i])\
local X=http.get(\"https://raw.githubusercontent.com/TsarN/uber-os/master/repo/\"..MD[i]..\".utar\")if not X then\
error(\"Failed to download \"..\
MD[i]..\"! Make sure, that you have raw.githubusercontent.com whitelisted or try again later.\")end;print(\
\"Saving package \"..MD[i])\
local L=fs.open(\"/tmp/\"..MD[i],\"w\")L.write(X.readAll())L.close()X.close()print(\"Unpacking package \"..\
MD[i])\
lua.include(\"libarchive\")if fs.exists(\"/usr/pkg/\"..MD[i])then\
fs.delete(\"/usr/pkg/\"..MD[i])end\
fs.makeDir(\"/usr/pkg/\"..MD[i])\
archive.unpack(\"/tmp/\"..MD[i],\"/usr/pkg/\"..MD[i])fs.delete(\"/tmp/\"..MD[i])\
print(\"Downloading package \"..MD[i]..\" done!\")end end\
local function EE(SL)if fs.exists(\"/var/lib/upt/\"..SL)then return end\
Y({SL})\
fs.open(\"/var/lib/upt/\"..SL,\"w\").close()local RA=listDeps(SL,true)\
print(\"Dependencies required for package \"..SL..\
\": \"..table.concat(RA,\", \"))for FW,IH in pairs(RA)do EE(IH)end;N({SL})end;local EK={}for i=2,#QW do table.insert(EK,QW[i])end\
if\
QW[1]==\"install\"then if#QW<2 then\
error(\"Usage: upt install <package1> [package2] ...\")end;N(EK)end\
if QW[1]==\"remove\"then if#QW<2 then\
error(\"Usage: upt remove <package1> [package2] ...\")end;U(EK)end\
if QW[1]==\"get\"then if#QW<2 then\
error(\"Usage: upt get <package1> [package2] ...\")end;Y(EK)end\
if QW[1]==\"get-install\"then if#QW<2 then\
error(\"Usage: upt get-install <package1> [package2] ...\")end;for RU,SF in pairs(EK)do\
fs.delete(\"/var/lib/upt/\"..SF)EE(SF)end end",
}