{
  [ "/bin" ] = true,
  [ "/PKGINFO.lua" ] = "DEPENDS = {\"uberkernel\", \"corelib\", \"luamin\", \"libjson\"}\
VERSION = {0, 2, 1}",
  [ "/bin/upt" ] = "local GUM={...}lua.include(\"luamin\")if#GUM<1 then\
error(\"Usage: upt install|remove|get|get-install|update\")end\
function listDeps(RX,KY)\
if\
fs.exists(\"/usr/src/\"..RX..\"/PKGINFO.lua\")then\
shell.run(\"/usr/src/\"..RX..\"/PKGINFO.lua\")elseif fs.exists(\"/usr/pkg/\"..RX..\"/PKGINFO.lua\")then\
shell.run(\
\"/usr/pkg/\"..RX..\"/PKGINFO.lua\")else local FR=fs.open(\"/var/lib/upt/\"..RX,\"r\")\
DEPENDS=string.split(FR.readLine(),\" \")FR.close()end;local Y={}\
for F,RB in pairs(DEPENDS)do if notisntalled then if\
not fs.exists(\"/var/lib/upt/\"..RB)then table.insert(Y,RB)end else\
table.insert(Y,RB)end end;return Y end\
local function CP(S,TX)local Q=fs.list(S)\
for PX,D in pairs(Q)do\
if TX==\"\"and D==\"PKGINFO.lua\"then else\
if\
fs.isDir(S..\"/\"..D)then\
if fs.exists(TX..\"/\"..D)then else fs.makeDir(TX..\"/\"..D)end;CP(S..\"/\"..D,TX..\"/\"..D)else if fs.exists(TX..\"/\"..D)then fs.delete(\
TX..\"/\"..D)end;fs.copy(S..\"/\"..D,TX..\
\"/\"..D)end end end end\
local function M(W)local N=shell.dir()\
for i=1,#W do\
if fs.exists(\"/usr/pkg/\"..W[i])then\
CP(\"/usr/pkg/\"..W[i],\"\")\
shell.run(\"/usr/pkg/\"..W[i]..\"/PKGINFO.lua\")local XN=fs.recursList(\"/usr/pkg/\"..W[i])local V=fs.open(\"/var/lib/upt/\"..\
W[i],\"w\")\
V.writeLine(table.concat(DEPENDS,\" \"))V.writeLine(table.concat(VERSION,\".\"))\
for j=#XN,1,-1 do local TG=fsd.stripPath(\
\"/tmp/\"..W[i],XN[j])if not fs.isDir(TG)then V.write(\
TG..\"\\n\")end end;V.write(\"//DIRLIST\\n\")\
for j=#XN,1,-1 do\
local ET=fsd.stripPath(\"/tmp/\"..W[i],XN[j])if fs.isDir(ET)then V.write(ET..\"\\n\")end end;V.close()\
print(\"Package \"..W[i]..\" installed from /usr/pkg\")return end\
if not fs.exists(\"/usr/src/\"..W[i])then error(\"Package \"..\
W[i]..\" not found!\")end;print(\"Building package \"..W[i])shell.setDir(\"/usr/src/\"..\
W[i])\
shell.run(\"/usr/src/\"..W[i]..\"/PKGINFO.lua\")print(\"Checking dependencies...\")\
for XC,RA in pairs(DEPENDS)do if not fs.exists(\"/var/lib/upt/\"..\
RA)then\
error(\"Dependency \"..RA..\" not satisfied!\")end\
print(\"Dependency \"..RA..\" ok\")end;print(\"All dependencies satisfied\")shell.run(\"/usr/src/\"..\
W[i]..\"/Build.lua\")\
fs.makeDir(\"/tmp/\"..W[i])print(\"Installing package \"..W[i])\
shell.run(\
\"/usr/src/\"..W[i]..\"/Build.lua install /tmp/\"..W[i])\
shell.run(\"/usr/src/\"..W[i]..\"/Build.lua install\")print(\"Registring package \"..W[i])local CN=fs.recursList(\"/tmp/\"..\
W[i])\
local X=fs.open(\"/var/lib/upt/\"..W[i],\"w\")X.writeLine(table.concat(DEPENDS,\" \"))\
X.writeLine(table.concat(VERSION,\".\"))\
for j=#CN,1,-1 do local TQ=fsd.stripPath(\"/tmp/\"..W[i],CN[j])if not\
fs.isDir(TQ)then X.write(TQ..\"\\n\")end end;X.write(\"//DIRLIST\\n\")\
for j=#CN,1,-1 do\
local J=fsd.stripPath(\"/tmp/\"..W[i],CN[j])if fs.isDir(J)then X.write(J..\"\\n\")end end;X.close()fs.delete(\"/tmp/\"..W[i])print(\"Installing package \"..W[i]..\
\" done!\")end;shell.setDir(N)end\
local function DN(G)\
for i=1,#G do\
if not fs.exists(\"/var/lib/upt/\"..G[i])then error(\"Package \"..G[i]..\
\" not found!\")end;print(\"Removing package \"..G[i])\
local V=fs.open(\"/var/lib/upt/\"..G[i],\"r\")V.readLine()V.readLine()local YK=V.readLine()local IJ=false\
while YK do\
if\
YK==\"//DIRLIST\"then YK=V.readLine()IJ=true;if not YK then break end end;if not IJ then fs.delete(YK)else\
if#fs.list(YK)==0 then fs.delete(YK)end end;YK=V.readLine()end;V.close()fs.delete(\"/var/lib/upt/\"..G[i])print(\
\"Removing package \"..G[i]..\" done!\")end end\
local function AT()print(\"Updating package list...\")\
local G=http.get(\"https://raw.githubusercontent.com/TsarN/uber-os/master/repo/repo.db\")\
if not G then error(\"Failed to get package list!\")end;local KK=fs.open(\"/var/lib/upt/database\",\"w\")\
KK.write(G.readAll())G.close()KK.close()print(\"Package list updated\")end\
local function A(NN)lua.include(\"libjson\")if not http then\
error(\"Http API not enabled\")end;local WX;if\
not fs.exists(\"/var/lib/upt/database\")then AT()end\
local C=fs.open(\"/var/lib/upt/database\",\"r\")WX=string.split(C.readAll(),\"\\n\")C.close()\
for i=1,#NN do\
local O=true;for T,H in pairs(WX)do if NN[i]==H then O=false end end;if O then\
error(\"Package not found!\")end\
print(\"Downloading package \"..NN[i])\
local L=http.get(\"https://raw.githubusercontent.com/TsarN/uber-os/master/repo/\"..NN[i]..\".utar\")if not L then\
error(\"Failed to download \"..\
NN[i]..\"! Make sure, that you have raw.githubusercontent.com whitelisted or try again later.\")end;print(\
\"Saving package \"..NN[i])\
local AE=fs.open(\"/tmp/\"..NN[i],\"w\")AE.write(L.readAll())AE.close()L.close()print(\
\"Unpacking package \"..NN[i])\
lua.include(\"libarchive\")if fs.exists(\"/usr/pkg/\"..NN[i])then\
fs.delete(\"/usr/pkg/\"..NN[i])end\
fs.makeDir(\"/usr/pkg/\"..NN[i])\
archive.unpack(\"/tmp/\"..NN[i],\"/usr/pkg/\"..NN[i])fs.delete(\"/tmp/\"..NN[i])\
print(\"Downloading package \"..NN[i]..\" done!\")end end\
local function VJ(DS)if fs.exists(\"/var/lib/upt/\"..DS)then return end\
A({DS})\
fs.open(\"/var/lib/upt/\"..DS,\"w\").close()local R=listDeps(DS,true)\
print(\"Dependencies required for package \"..DS..\
\": \"..table.concat(R,\", \"))for JK,DC in pairs(R)do VJ(DC)end;M({DS})end;local UW={}for i=2,#GUM do table.insert(UW,GUM[i])end\
if GUM[1]==\
\"install\"then if#GUM<2 then\
error(\"Usage: upt install <package1> [package2] ...\")end;M(UW)end\
if GUM[1]==\"remove\"then if#GUM<2 then\
error(\"Usage: upt remove <package1> [package2] ...\")end;DN(UW)end\
if GUM[1]==\"get\"then if#GUM<2 then\
error(\"Usage: upt get <package1> [package2] ...\")end;A(UW)end\
if GUM[1]==\"get-install\"then if#GUM<2 then\
error(\"Usage: upt get-install <package1> [package2] ...\")end;for EV,P in pairs(UW)do\
fs.delete(\"/var/lib/upt/\"..P)VJ(P)end end",
}