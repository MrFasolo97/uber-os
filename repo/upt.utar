{
  [ "/bin" ] = true,
  [ "/PKGINFO.lua" ] = "DEPENDS = {\"uberkernel\", \"corelib\"}\
VERSION = {0, 2, 1}",
  [ "/bin/upt" ] = "local MY={...}lua.include(\"luamin\")if#MY<1 then\
error(\"Usage: upt install|remove|get|get-install|update|upgrade\")end\
local function A(OX,W)local H,LI\
if not W and\
fs.exists(\"/var/lib/upt/\"..OX)then\
local B=fs.open(\"/var/lib/upt/\"..OX,\"r\")H=string.split(B.readLine(),\" \")\
LI=string.split(B.readLine(),\";\")B.close()return H,LI end;local Z=fs.open(\"/var/lib/upt/database\",\"r\")\
for M,ZA in\
pairs(string.split(Z.readAll(),\"\\n\"))do local IU=string.split(ZA,\" \")\
LI=string.split(IU[2],\";\")H=string.split(IU[3],\";\")if IU[1]==OX then break end end;Z.close()return H,LI end\
function listDeps(T,OT)A(T)local NMH={}\
for KO,YSB in pairs(DEPENDS)do if notisntalled then if\
not fs.exists(\"/var/lib/upt/\"..YSB)then table.insert(NMH,YSB)end else\
table.insert(NMH,YSB)end end;return NMH end\
local function MG(EX,OP)local YW=fs.list(EX)\
for NWF,Z in pairs(YW)do\
if fs.isDir(EX..\"/\"..Z)then if\
fs.exists(OP..\"/\"..Z)then else fs.makeDir(OP..\"/\"..Z)end;MG(EX..\
\"/\"..Z,OP..\"/\"..Z)else if fs.exists(OP..\"/\"..Z)then fs.delete(\
OP..\"/\"..Z)end;fs.copy(EX..\"/\"..Z,\
OP..\"/\"..Z)end end end\
local function VN()local Q=fs.list(\"/var/lib/upt\")local GL={}for I,AO in pairs(Q)do if AO==\"database\"then else\
GL[AO]=true end end;return GL end\
local function Y(UF,GU)\
if not GU then GU={}for F,FL in pairs(UF)do GU[FL]=true end end;for i=1,#UF do DEPENDS,VERSION=A(UF[i])\
for SY,LD in pairs(DEPENDS)do if\
VN()[LD]or GU[LD]or LD==\"\"then else GU[LD]=true;Y({LD},GU)end end end\
return GU end\
local function ASR(B,LC)if not fs.exists(\"/var/lib/upt/database\")then\
error(\"Database not found. Run 'upt update' to download it.\")end\
local OZ=shell.dir()\
for i=1,#B do\
if fs.exists(\"/usr/pkg/\"..B[i])then\
MG(\"/usr/pkg/\"..B[i],\"\")DEPENDS,VERSION=A(B[i])\
local LS=fs.recursList(\"/usr/pkg/\"..B[i])local BDV=fs.open(\"/var/lib/upt/\"..B[i],\"w\")\
BDV.writeLine(table.concat(DEPENDS,\" \"))BDV.writeLine(table.concat(VERSION,\";\"))\
for j=#LS,1,\
-1 do local HP=fsd.stripPath(\"/tmp/\"..B[i],LS[j])if not\
fs.isDir(HP)then BDV.write(HP..\"\\n\")end end;BDV.write(\"//DIRLIST\\n\")\
for j=#LS,1,-1 do\
local W=fsd.stripPath(\"/tmp/\"..B[i],LS[j])if fs.isDir(W)then BDV.write(W..\"\\n\")end end;BDV.close()\
print(\"Package \"..B[i]..\" installed from /usr/pkg\")return end\
if not fs.exists(\"/usr/src/\"..B[i])then error(\"Package \"..\
B[i]..\" not found!\")end;print(\"Building package \"..B[i])shell.setDir(\"/usr/src/\"..\
B[i])\
shell.run(\"/usr/src/\"..B[i]..\"/PKGINFO.lua\")\
if not LC then print(\"Checking dependencies...\")\
for G,NM in pairs(DEPENDS)do if not fs.exists(\
\"/var/lib/upt/\"..NM)then\
error(\"Dependency \"..NM..\" not satisfied!\")end\
print(\"Dependency \"..NM..\" ok\")end;print(\"All dependencies satisfied\")end\
shell.run(\"/usr/src/\"..B[i]..\"/Build.lua\")fs.makeDir(\"/tmp/\"..B[i])\
print(\"Installing package \"..B[i])\
shell.run(\"/usr/src/\"..B[i]..\"/Build.lua install /tmp/\"..B[i])\
shell.run(\"/usr/src/\"..B[i]..\"/Build.lua install\")print(\"Registring package \"..B[i])local ARV=fs.recursList(\"/tmp/\"..\
B[i])\
local H=fs.open(\"/var/lib/upt/\"..B[i],\"w\")H.writeLine(table.concat(DEPENDS,\" \"))\
H.writeLine(table.concat(VERSION,\";\"))\
for j=#ARV,1,-1 do local EA=fsd.stripPath(\"/tmp/\"..B[i],ARV[j])if not\
fs.isDir(EA)then H.write(EA..\"\\n\")end end;H.write(\"//DIRLIST\\n\")\
for j=#ARV,1,-1 do\
local K=fsd.stripPath(\"/tmp/\"..B[i],ARV[j])if fs.isDir(K)then H.write(K..\"\\n\")end end;H.close()fs.delete(\"/tmp/\"..B[i])print(\"Installing package \"..B[i]..\
\" done!\")end;shell.setDir(OZ)end\
local function U(Q)if not fs.exists(\"/var/lib/upt/database\")then\
error(\"Database not found. Run 'upt update' to download it.\")end\
for i=1,#Q do if not\
fs.exists(\"/var/lib/upt/\"..Q[i])then\
error(\"Package \"..Q[i]..\" not found!\")end\
print(\"Removing package \"..Q[i])local PR=fs.open(\"/var/lib/upt/\"..Q[i],\"r\")\
PR.readLine()PR.readLine()local FI=PR.readLine()local Z=false\
while FI do if FI==\"//DIRLIST\"then\
FI=PR.readLine()Z=true;if not FI then break end end\
if not Z then\
fs.delete(FI)else if#fs.list(FI)==0 then fs.delete(FI)end end;FI=PR.readLine()end;PR.close()fs.delete(\"/var/lib/upt/\"..Q[i])print(\
\"Removing package \"..Q[i]..\" done!\")end end\
local function IH()print(\"Updating package list...\")\
local H=http.get(\"https://raw.githubusercontent.com/TsarN/uber-os/master/repo/repo.db\")\
if not H then error(\"Failed to get package list!\")end;local ZT=fs.open(\"/var/lib/upt/database\",\"w\")\
ZT.write(H.readAll())H.close()ZT.close()print(\"Package list updated\")end\
local function TB(MW)if not fs.exists(\"/var/lib/upt/database\")then\
error(\"Database not found. Run 'upt update' to download it.\")end;if not http then\
error(\"Http API not enabled\")end;local VZ;if\
not fs.exists(\"/var/lib/upt/database\")then IH()end\
local IJ=fs.open(\"/var/lib/upt/database\",\"r\")VZ=string.split(IJ.readAll(),\"\\n\")for F,T in pairs(VZ)do\
VZ[F]=string.split(T,\" \")[1]end;IJ.close()\
for i=1,#MW do local FS=true;for GO,ZO in pairs(VZ)do if MW[i]==ZO then\
FS=false end end;if FS then\
error(\"Package not found!\")end\
print(\"Downloading package \"..MW[i])\
local KC=http.get(\"https://raw.githubusercontent.com/TsarN/uber-os/master/repo/\"..MW[i]..\".utar\")if not KC then\
error(\"Failed to download \"..\
MW[i]..\"! Make sure, that you have raw.githubusercontent.com whitelisted or try again later.\")end;print(\
\"Saving package \"..MW[i])\
local LU=fs.open(\"/tmp/\"..MW[i],\"w\")LU.write(KC.readAll())LU.close()KC.close()print(\
\"Unpacking package \"..MW[i])\
lua.include(\"libarchive\")if fs.exists(\"/usr/pkg/\"..MW[i])then\
fs.delete(\"/usr/pkg/\"..MW[i])end\
fs.makeDir(\"/usr/pkg/\"..MW[i])\
archive.unpack(\"/tmp/\"..MW[i],\"/usr/pkg/\"..MW[i])fs.delete(\"/tmp/\"..MW[i])\
print(\"Downloading package \"..MW[i]..\" done!\")end end\
local function O(UV)if not fs.exists(\"/var/lib/upt/database\")then\
error(\"Database not found. Run 'upt update' to download it.\")end\
local QS=fs.open(\"/var/lib/upt/database\",\"r\")pkglist=string.split(QS.readAll(),\"\\n\")for OY,EJ in pairs(pkglist)do\
pkglist[OY]=string.split(EJ,\" \")[1]end;QS.close()\
for i=1,#UV do local CY=true;for P,DP in pairs(pkglist)do if\
UV[i]==DP then CY=false end end;if CY then\
error(\"Package not found!\")end end;print(\"Building dependency tree...\")local Z=Y(UV)\
print(\"Following packages will be installed/upgraded:\")\
for G,JP in pairs(Z)do write(G..\":\")DEPENDS,VERSION=A(G,true)write(\
table.concat(VERSION,\".\")..\" \")end;print()write(\"Confirm? [Y/n]: \")local V=read()if\
V==\"n\"or V==\"N\"then return end;for QW,SK in pairs(Z)do TB({QW})end;for E,B in pairs(Z)do\
ASR({E},true)end end\
local function N()local OD=VN()local Q={}\
for I,UT in pairs(OD)do DEPENDS1,VERSION1=A(I,true)DEPENDS,VERSION=A(I)\
local YI=false\
for i=1,3 do if VERSION1[i]>VERSION[i]then YI=true;break end end;if YI then table.insert(Q,I)end end;O(Q)end;local LK={}for i=2,#MY do table.insert(LK,MY[i])end\
if\
MY[1]==\"install\"then if#MY<2 then\
error(\"Usage: upt install <package1> [package2] ...\")end;ASR(LK)end;if MY[1]==\"update\"then IH()end;if MY[1]==\"upgrade\"then N()end\
if MY[1]==\
\"remove\"then if#MY<2 then\
error(\"Usage: upt remove <package1> [package2] ...\")end;U(LK)end\
if MY[1]==\"get\"then if#MY<2 then\
error(\"Usage: upt get <package1> [package2] ...\")end;TB(LK)end\
if MY[1]==\"get-install\"then if#MY<2 then\
error(\"Usage: upt get-install <package1> [package2] ...\")end;O(LK)end",
}