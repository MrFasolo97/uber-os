{
  [ "/lib/base64.lua" ] = "local HF='ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\
function base64enc(EE)\
return\
(\
(\
EE:gsub('.',function(MD)\
local X,HF='',MD:byte()for i=8,1,-1 do X=X..\
(HF%2^i-HF%2^ (i-1)>0 and'1'or'0')end;return X end)..'0000'):gsub('%d%d%d?%d?%d?%d?',function(WL)if(\
#WL<6)then return''end;local V=0\
for i=1,6 do V=V+ (\
WL:sub(i,i)=='1'and 2^ (6-i)or 0)end;return HF:sub(V+1,V+1)end).. ({'','==','='})[#EE%3+1])end\
function base64dec(J)J=string.gsub(J,'[^'..HF..'=]','')\
return\
(J:gsub('.',function(VI)if\
(VI=='=')then return''end;local YR,K='',(HF:find(VI)-1)for i=6,1,-1 do\
YR=YR.. (K%2^i-K%2^\
(i-1)>0 and'1'or'0')end;return YR end):gsub('%d%d%d?%d?%d?%d?%d?%d?',function(Z)if(\
#Z~=8)then return''end;local C=0\
for i=1,8 do C=C+ (\
Z:sub(i,i)=='1'and 2^ (8-i)or 0)end;return string.char(C)end))end",
  [ "/lib/fixserialize.lua" ] = "\
local function UT(FB,GN,CC)local S=type(FB)\
if S==\"table\"then if GN[FB]~=nil then\
error(\"Cannot serialize table with recursive entries\",0)end;GN[FB]=true\
if next(FB)==nil then return\"{}\"else\
local BG=\"{\\n\"local AN=CC..\"  \"local VC={}for O,JR in ipairs(FB)do VC[O]=true;BG=BG..\
AN..UT(JR,GN,AN)..\",\\n\"end\
for F,LI in pairs(FB)do\
if not\
VC[F]then local OD\
if\
type(F)==\"string\"and string.match(F,\"^[%a_][%a%d_]*$\")then OD=F..\" = \"..UT(LI,GN,AN)..\",\\n\"else\
OD=\"[ \"..\
UT(F,GN,AN)..\" ] = \"..UT(LI,GN,AN)..\",\\n\"end;BG=BG..AN..OD end end;BG=BG..CC..\"}\"GN[FB]=nil;return BG end elseif S==\"string\"then return string.format(\"%q\",FB)elseif\
S==\"number\"or S==\"boolean\"or S==\"nil\"then return tostring(FB)else\
error(\"Cannot serialize type \"..S,0)end end;function fserialize(YH)local DZ={}return UT(YH,DZ,\"\")end",
  [ "/lib" ] = true,
  [ "/lib/copy.lua" ] = "\
function deepcopy(A)local SL=type(A)local T;if SL=='table'then T={}for TX,P in next,A,nil do\
T[deepcopy(TX)]=deepcopy(P)end\
setmetatable(T,deepcopy(getmetatable(A)))else T=A end;return T end",
  [ "/lib/split.lua" ] = "\
function split(H,Q)local KI=1;local EN={}local I=table.insert;if not Q then Q='%s+'end\
if Q==''then return{H}end\
while true do local OD,IMW=H:find(Q,KI)\
if not OD then local IVV=H:sub(KI)\
if IVV~=''then I(EN,IVV)end;if#EN==1 and EN[1]==''then return{}else return EN end end;I(EN,H:sub(KI,OD-1))KI=IMW+1 end end\
function string:split(N)\
if type(N)==\"string\"then local I={}local QB=1\
local R,BU=string.find(self,N,QB)\
while R do table.insert(I,string.sub(self,QB,R-1))QB=\
BU+1;R,BU=string.find(self,N,QB)end;table.insert(I,string.sub(self,QB))return I elseif type(N)==\
\"number\"then return self:gmatch((\".?\"):rep(N))end end",
  [ "/PKGINFO.lua" ] = "DEPENDS = {\"uberkernel\"}\
VERSION = {0, 2, 1}",
}