{
  [ "/bin/drive" ] = "local X={...}local OD=shell.dir()if X[1]~=nil then\
OD=shell.resolve(X[1])end\
if fs.exists(OD)then\
write(fs.getDrive(OD)..\" (\")local CK=fs.getFreeSpace(OD)\
if CK>1024*1024 then\
print((\
math.floor(CK/ (100*1000))/10)..\"MB remaining)\")elseif CK>1024 then\
print(math.floor(CK/1000)..\"KB remaining)\")else print(CK..\"B remaining)\")end else print(\"No such path\")end",
  [ "/bin" ] = true,
  [ "/bin/id" ] = "local YY=nil;local W={...}if#W>0 then YY=tostring(W[1])end\
if YY==nil then\
print(\
\"This is computer #\"..os.getComputerID())local N=os.getComputerLabel()if N then\
print(\"This computer is labelled \\\"\"..N..\"\\\"\")end else local MR=disk.hasData(YY)if not MR then print(\"No disk in drive \"..\
YY)return end;print(\
\"The disk is #\"..disk.getID(YY))\
local Y=disk.getLabel(YY)if Y then\
print(\"The disk is labelled \\\"\"..Y..\"\\\"\")end end",
  [ "/bin/readlink" ] = "local L={...}\
if#L<1 then error(\"Usage: readlink <LINK>\")end\
local B=fs.getInfo(shell.resolve(L[1])).linkto;if B then print(B)else error(\"Not a link!\")end",
  [ "/bin/mv" ] = "local JV={...}if#JV<2 then\
print(\"Usage: mv <source> <destination>\")return end\
fs.move(shell.resolve(JV[1]),shell.resolve(JV[2]))",
  [ "/bin/modprobe" ] = "argv={...}if#argv==0 then\
print(\"Usage: modprobe <module1> [module2] ...\")return end;for i=1,#argv do\
kernel.loadModule(argv[i],false)end",
  [ "/bin/ls" ] = "local HC={...}local IO=shell.dir()local H={}\
if#HC>0 then if HC[1]:sub(1,1)==\"-\"then\
H=HC[1]else IO=HC[1]end;if#HC==2 then IO=HC[2]end end;local Y=false;local QL=false;for i=2,#H do if H:sub(i,i)==\"a\"then Y=true end;if\
H:sub(i,i)==\"l\"then QL=true end end\
IO=fs.normalizePath(IO)files=fs.list(IO)local O=0;local Q;for i=1,#files do Q=string.len(files[i])if\
Q>O then O=Q end end;local MH=\"-\"local F=\"\"\
for i=1,#files do\
if(\
files[i]:sub(1,1)~=\".\")or Y then if\
fs.isDir(IO..\"/\"..files[i])then\
if term.isColor()then term.setTextColor(colors.blue)end;MH=\"d\"end\
if fs.getInfo(IO..\
\"/\"..files[i]).linkto then if term.isColor()then\
term.setTextColor(colors.cyan)end end\
if QL then write(files[i])\
for j=string.len(files[i]),O do write(\" \")end;if fs.getInfo(IO..\"/\"..files[i]).linkto then\
F=\" -> \"..fs.getInfo(IO..\"/\"..\
files[i]).linkto else F=\"\"end\
print(MH,table.concat(fsd.normalizePerms(fsd.getInfo(\
IO..\"/\"..files[i]).perms),\"\"),\" \",users.getUsernameByUID(fsd.getInfo(\
IO..\"/\"..files[i]).owner),F)else write(files[i]..\" \")end\
if term.isColor()then term.setTextColor(colors.white)end;MH=\"-\"F=\"\"end end;if not QL then print()end",
  [ "/bin/rm" ] = "local OJ={...}\
if#OJ<1 then print(\"Usage: rm <path>\")return end;local SM=shell.resolve(OJ[1])fs.delete(SM)",
  [ "/bin/clear" ] = "term.clear()term.setCursorPos(1,1)",
  [ "/bin/reboot" ] = "\
if term.isColour()then term.setTextColour(colours.yellow)end;print(\"Goodbye\")\
term.setTextColour(colours.white)sleep(1)os.reboot()",
  [ "/bin/ln" ] = "local P={...}\
if#P<2 then error(\"Usage ln <TARGET> <LINK_NAME>\")end\
if\
fs.exists(fs.normalizePath(shell.resolve(P[2])))then error(\"Link already exists!\")end\
if not\
fs.exists(fs.normalizePath(shell.resolve(P[1])))then error(\"Target does not exists!\")end\
if\
fs.isDir(fs.normalizePath(shell.resolve(P[1])))then\
fs.makeDir(fs.normalizePath(shell.resolve(P[2])))else\
fs.open(fs.normalizePath(shell.resolve(P[2])),\"w\").close()end\
fs.setNode(shell.resolve(P[2]),nil,nil,shell.resolve(P[1]))",
  [ "/bin/cp" ] = "local N={...}if#N<2 then print(\"Usage: cp <source> <destination>\")\
return end\
fs.copy(shell.resolve(N[1]),shell.resolve(N[2]))",
  [ "/PKGINFO.lua" ] = "DEPENDS = {\"uberkernel\", \"corelib\"}\
VERSION = {0, 2, 1}",
  [ "/bin/kill" ] = "argv={...}if#argv==0 then\
print(\"Usage: kill <PID> [TERM|KILL]\")return end;local JU,G\
if#argv==1 then G=\"KILL\"else G=argv[2]end;if G==\"KILL\"then JU=2 end;if G==\"TERM\"then JU=1 end\
thread.kill(tonumber(argv[1]),JU)",
  [ "/bin/cd" ] = "local E={...}\
if#E<1 then print(\"Usage: cd <path>\")return end;local O=shell.resolve(E[1])if fs.isDir(O)then shell.setDir(O)else\
print(\"Not a directory\")return end",
  [ "/bin/mount" ] = "local M={...}if#M<3 then\
error(\"Usage: mount <DEV> <FS> <MOUNTPOINT>\")end;local GU=fs.open(M[1],\"r\")\
local TR=textutils.unserialize(GU.readAll())GU.close()\
fs.mount(\"/\"..TR.mounted,M[2],M[3])",
  [ "/bin/chmod" ] = "local OP={...}if#OP<2 then\
print(\"Usage: chmod <mode> <file1> [file2] ...\")return end\
for i=2,#OP do fsd.setNode(fsd.normalizePath(shell.resolve(OP[i])),\
nil,OP[1])end",
  [ "/bin/shutdown" ] = "\
if term.isColour()then term.setTextColour(colours.yellow)end;print(\"Goodbye\")\
term.setTextColour(colours.white)sleep(1)os.shutdown()",
  [ "/bin/alias" ] = "local Z={...}\
if#Z>2 then print(\"Usage: alias <alias> <program>\")return end;local F=Z[1]local DT=Z[2]\
if F and DT then shell.setAlias(F,DT)elseif F then\
shell.clearAlias(F)else local T=shell.aliases()local FJJ={}\
for F,V in pairs(T)do table.insert(FJJ,F)end;table.sort(FJJ)textutils.pagedTabulate(FJJ)end",
  [ "/bin/eject" ] = "local NO={...}\
if#NO==0 then print(\"Usage: eject <drive>\")return end;local BI=NO[1]local CM=disk.isPresent(BI)if not CM then\
print(\"Nothing in \"..BI..\" drive\")return end;disk.eject(BI)",
  [ "/bin/ps" ] = "local VU=thread.getRunningThreads()local Q={}for B,KS in pairs(VU)do\
table.insert(Q,{KS.pid,KS.desc,users.getUsernameByUID(KS.uid)})end\
textutils.tabulate({\"PID\",\"CMD\",\"USER\"},unpack(Q))",
  [ "/bin/chown" ] = "local PK={...}if#PK<2 then\
print(\"Usage: chown <owner> <file1> [file2] ...\")return end;for i=2,#PK do\
fsd.setNode(fsd.normalizePath(shell.resolve(PK[i])),users.getUIDByUsername(PK[1]),\
nil)end",
  [ "/bin/label" ] = "\
local function N()print(\"Usages:\")print(\"label get\")\
print(\"label get <drive>\")print(\"label set <text>\")\
print(\"label set <drive> <text>\")print(\"label clear\")print(\"label clear <drive>\")end\
local function G(GAF)\
if peripheral.getType(GAF)==\"drive\"then\
local O=disk.hasData(GAF)if not O then print(\"No disk in \"..GAF..\" drive\")return\
false end else\
print(\"No disk drive named \"..GAF)return false end;return true end\
local function QV(L)\
if L~=nil then\
if G(L)then local EB=disk.getLabel(L)if EB then\
print(\"Disk label is \\\"\"..EB..\"\\\"\")else print(\"No Disk label\")end end else local UH=os.getComputerLabel()\
if UH then\
print(\"Computer label is \\\"\"..UH..\"\\\"\")else print(\"No Computer label\")end end end\
local function A(P,JQ)\
if P~=nil then\
if G(P)then disk.setLabel(P,JQ)local TM=disk.getLabel(P)if TM then print(\
\"Disk label set to \\\"\"..TM..\"\\\"\")else\
print(\"Disk label cleared\")end end else os.setComputerLabel(JQ)local E=os.getComputerLabel()if E then print(\
\"Computer label set to \\\"\"..E..\"\\\"\")else\
print(\"Computer label cleared\")end end end;local HZ={...}local JY=HZ[1]\
if JY==\"get\"then\
if#HZ==1 then QV(nil)elseif#HZ==2 then QV(HZ[2])else N()end elseif JY==\"set\"then\
if#HZ==2 then A(nil,HZ[2])elseif#HZ==3 then A(HZ[2],HZ[3])else N()end elseif JY==\"clear\"then\
if#HZ==1 then A(nil,nil)elseif#HZ==2 then A(HZ[2],nil)else N()end else N()end",
  [ "/bin/lua" ] = "local XT={...}if#XT>0 then\
print(\"This is an interactive Lua prompt.\")print(\"To run a lua program, just type its name.\")\
return end;local DA=true;local BG={}\
local WY={[\"exit\"]=function()\
DA=false end,[\"_echo\"]=function(...)return...end}setmetatable(WY,{__index=getfenv()})\
if\
term.isColour()then term.setTextColour(colours.yellow)end;print(\"Interactive Lua prompt.\")\
print(\"Call exit() to exit.\")term.setTextColour(colours.white)\
while DA do write(\"lua> \")local O=read(\
nil,BG)table.insert(BG,O)local J=0\
local S,CA=loadstring(O,\"lua\")\
local MV,SO=loadstring(\"return _echo(\"..O..\");\",\"lua\")\
if not S then if MV then S=MV;CA=nil;J=1 end else if MV then S=MV end end\
if S then setfenv(S,WY)local CK={pcall(S)}\
if CK[1]then local OAF=1\
while\
(CK[OAF+1]~=nil)or(OAF<=J)do local OY=CK[OAF+1]if type(OY)==\"table\"then\
local CS,HF=pcall(textutils.serialise,OY)if CS then print(HF)else print(tostring(OY))end else\
print(tostring(OY))end\
OAF=OAF+1 end else printError(CK[2])end else printError(CA)end end",
  [ "/bin/umount" ] = "local T={...}\
if#T<1 then error(\"Usage: umount <PATH>\")end;fs.umountPath(T[1])",
  [ "/bin/mkdir" ] = "local BG={...}\
if#BG<1 then print(\"Usage: mkdir <path>\")return end;local PY=shell.resolve(BG[1])fs.makeDir(PY)",
  [ "/bin/exit" ] = "shell.exit()",
  [ "/bin/log" ] = "shell.run(\"edit /boot/log\")",
  [ "/bin/edit" ] = "local JP={...}\
if#JP==0 then print(\"Usage: edit <path>\")return end;local CU=shell.resolve(JP[1])local TO=fs.isReadOnly(CU)if\
fs.exists(CU)and fs.isDir(CU)then\
print(\"Cannot edit a directory.\")return end;local RA,GM=1,1\
local PN,NY=term.getSize()local C,EM=0,0;local QGO={}local XT=true;local LW,A,N,K,KG\
if term.isColour()then KG=colours.black\
K=colours.white;LW=colours.yellow;A=colours.yellow;N=colours.green\
stringColour=colours.red else KG=colours.black;K=colours.white;LW=colours.white;A=colours.white\
N=colours.white;stringColour=colours.white end;local RL=false;local LH=1;local CI;if TO then CI={\"Exit\",\"Print\"}else\
CI={\"Save\",\"Exit\",\"Print\"}end;local KF=\"Press Ctrl to access menu\"\
local function W(WR)QGO={}\
if\
fs.exists(WR)then local E=fs.open(WR,\"r\")local Z=E.readLine()while Z do\
table.insert(QGO,Z)Z=E.readLine()end;E.close()end;if#QGO==0 then table.insert(QGO,\"\")end end\
local function D(UF)\
local P=CU:sub(1,CU:len()-fs.getName(CU):len())if not fs.exists(P)then fs.makeDir(P)end;local NZQ=nil;local function KFK()\
NZQ=fs.open(UF,\"w\")\
if NZQ then for PY,T in ipairs(QGO)do NZQ.write(T..\"\\n\")end else error(\
\"Failed to open \"..UF)end end\
local NE=pcall(KFK)if NZQ then NZQ.close()end;return NE end\
local LD={[\"and\"]=true,[\"break\"]=true,[\"do\"]=true,[\"else\"]=true,[\"elseif\"]=true,[\"end\"]=true,[\"false\"]=true,[\"for\"]=true,[\"function\"]=true,[\"if\"]=true,[\"in\"]=true,[\"local\"]=true,[\"nil\"]=true,[\"not\"]=true,[\"or\"]=true,[\"repeat\"]=true,[\"return\"]=true,[\"then\"]=true,[\"true\"]=true,[\"until\"]=true,[\"while\"]=true}\
local function JR(G,R,WI)local X=string.match(G,R)\
if X then\
if type(WI)==\"number\"then\
term.setTextColour(WI)else term.setTextColour(WI(X))end;term.write(X)term.setTextColour(K)return string.sub(G,\
string.len(X)+1)end;return nil end\
local function RZ(PD)\
while string.len(PD)>0 do\
PD=\
\
\
JR(PD,\"^%-%-%[%[.-%]%]\",N)or JR(PD,\"^%-%-.*\",N)or JR(PD,\"^\\\".-[^\\\\]\\\"\",stringColour)or\
JR(PD,\"^\\'.-[^\\\\]\\'\",stringColour)or\
JR(PD,\"^%[%[.-%]%]\",stringColour)or\
JR(PD,\"^[%w_]+\",function(DM)if LD[DM]then return A end;return K end)or JR(PD,\"^[^%w_]\",K)end end\
local function AKB()\
for GM=1,NY-1 do term.setCursorPos(1-C,GM)term.clearLine()\
local XR=QGO[GM+EM]if XR~=nil then RZ(XR)end end;term.setCursorPos(RA-C,GM-EM)end\
local function Q(Y)local S=QGO[Y]term.setCursorPos(1-C,Y-EM)\
term.clearLine()RZ(S)term.setCursorPos(RA-C,Y-EM)end\
local function M()term.setCursorPos(1,NY)term.clearLine()\
term.setCursorPos(PN-string.len(\
\"Ln \"..GM)+1,NY)term.setTextColour(LW)term.write(\"Ln \")\
term.setTextColour(K)term.write(GM)term.setCursorPos(1,NY)\
if RL then\
term.setTextColour(K)\
for AQ,T in pairs(CI)do\
if AQ==LH then term.setTextColour(LW)term.write(\"[\")\
term.setTextColour(K)term.write(T)term.setTextColour(LW)\
term.write(\"]\")term.setTextColour(K)else term.write(\" \"..T..\" \")end end else term.setTextColour(LW)term.write(KF)\
term.setTextColour(K)end;term.setCursorPos(RA-C,GM-EM)end\
local YP={Save=function()\
if TO then KF=\"Access denied\"else local QH,UP=D(CU)if QH then KF=\"Saved to \"..CU else\
KF=\"Error saving to \"..CU end end;M()end,Print=function()\
local QL=peripheral.find(\"printer\")if not QL then KF=\"No printer attached\"return end;local F=0\
local G=fs.getName(CU)\
if QL.getInkLevel()<1 then KF=\"Printer out of ink\"return elseif\
QL.getPaperLevel()<1 then KF=\"Printer out of paper\"return end;local PB=term.current()\
local IT={getCursorPos=QL.getCursorPos,setCursorPos=QL.setCursorPos,getSize=QL.getPageSize,write=QL.write}\
IT.scroll=function()if F==1 then\
QL.setPageTitle(G..\" (page \"..F..\")\")end\
while not QL.newPage()do\
if QL.getInkLevel()<1 then\
KF=\"Printer out of ink, please refill\"elseif QL.getPaperLevel()<1 then KF=\"Printer out of paper, please refill\"else\
KF=\"Printer output tray full, please empty\"end;term.redirect(PB)M()term.redirect(IT)\
local WD=os.startTimer(0.5)sleep(0.5)end;F=F+1;if F==1 then QL.setPageTitle(G)else\
QL.setPageTitle(G..\" (page \"..F..\")\")end end;RL=false;term.redirect(IT)\
local DL,HY=pcall(function()term.scroll()for RV,FYZ in ipairs(QGO)do\
print(FYZ)end end)term.redirect(PB)if not DL then print(HY)end\
while\
not QL.endPage()do KF=\"Printer output tray full, please empty\"M()sleep(0.5)end;RL=true\
if F>1 then KF=\"Printed \"..F..\" Pages\"else KF=\"Printed 1 Page\"end;M()end,Exit=function()\
XT=false end}local function SH(KW)YP[CI[KW]]()\
if RL then RL=false;term.setCursorBlink(true)end;M()end\
local function LF(RA,GM)local MO=RA-C;local MX=GM-EM\
local WFE=false\
if MO<1 then C=RA-1;MO=1;WFE=true elseif MO>PN then C=RA-PN;MO=PN;WFE=true end\
if MX<1 then EM=GM-1;MX=1;WFE=true elseif MX>NY-1 then EM=GM- (NY-1)MX=NY-1;WFE=true end;if WFE then AKB()end;term.setCursorPos(MO,MX)M()end;W(CU)term.setBackgroundColour(KG)term.clear()\
term.setCursorPos(RA,GM)term.setCursorBlink(true)AKB()M()\
while XT do\
local UL,E,O,PJ=os.pullEvent()\
if UL==\"key\"then\
if E==keys.up then\
if not RL then if GM>1 then GM=GM-1\
RA=math.min(RA,string.len(QGO[GM])+1)LF(RA,GM)end end elseif E==keys.down then\
if not RL then if GM<#QGO then GM=GM+1\
RA=math.min(RA,string.len(QGO[GM])+1)LF(RA,GM)end end elseif E==keys.tab then if not RL and not TO then QGO[GM]=\"  \"..QGO[GM]RA=RA+2\
LF(RA,GM)Q(GM)end elseif E==keys.pageUp then\
if not RL then if\
GM- (NY-1)>=1 then GM=GM- (NY-1)else GM=1 end;RA=math.min(RA,\
string.len(QGO[GM])+1)LF(RA,GM)end elseif E==keys.pageDown then if not RL then\
if GM+ (NY-1)<=#QGO then GM=GM+ (NY-1)else GM=#QGO end\
RA=math.min(RA,string.len(QGO[GM])+1)LF(RA,GM)end elseif E==\
keys.home then if not RL then RA=1;LF(RA,GM)end elseif E==keys[\"end\"]then if not RL then RA=\
string.len(QGO[GM])+1;LF(RA,GM)end elseif\
E==keys.left then\
if not RL then if RA>1 then RA=RA-1 elseif RA==1 and GM>1 then\
RA=string.len(QGO[GM-1])+1;GM=GM-1 end;LF(RA,GM)else LH=LH-1;if LH<1 then LH=\
#CI end;M()end elseif E==keys.right then\
if not RL then\
if RA<string.len(QGO[GM])+1 then RA=RA+1 elseif RA==\
string.len(QGO[GM])+1 and GM<#QGO then RA=1;GM=GM+1 end;LF(RA,GM)else LH=LH+1;if LH>#CI then LH=1 end;M()end elseif E==keys.delete then if not RL and not TO then table.remove(QGO,GM)GM=GM-1\
AKB()end elseif E==keys.backspace then\
if not RL and not TO then\
if RA>1 then\
local KVR=QGO[GM]\
QGO[GM]=string.sub(KVR,1,RA-2)..string.sub(KVR,RA)Q(GM)RA=RA-1;LF(RA,GM)elseif GM>1 then local QP=string.len(QGO[GM-1])QGO[\
GM-1]=QGO[GM-1]..QGO[GM]\
table.remove(QGO,GM)AKB()RA=QP+1;GM=GM-1;LF(RA,GM)end end elseif E==keys.enter then\
if not RL and not TO then local NU=QGO[GM]\
local AU,ZW=string.find(NU,\"^[ ]+\")if not ZW then ZW=0 end;QGO[GM]=string.sub(NU,1,RA-1)\
table.insert(QGO,GM+1,\
string.rep(' ',ZW)..string.sub(NU,RA))AKB()RA=ZW+1;GM=GM+1;LF(RA,GM)elseif RL then SH(LH)end elseif E==keys.leftCtrl or E==keys.rightCtrl then RL=not RL;if RL then\
term.setCursorBlink(false)else term.setCursorBlink(true)end\
M()end elseif UL==\"char\"then\
if not RL and not TO then local Z=QGO[GM]QGO[GM]=string.sub(Z,1,RA-1)..E..\
string.sub(Z,RA)Q(GM)RA=RA+1\
LF(RA,GM)elseif RL then\
for GF,MY in ipairs(CI)do if\
string.lower(string.sub(MY,1,1))==string.lower(E)then SH(GF)break end end end elseif UL==\"paste\"then\
if not RL and not TO then local QL=QGO[GM]QGO[GM]=string.sub(QL,1,RA-1)..E..\
string.sub(QL,RA)Q(GM)RA=RA+\
string.len(E)LF(RA,GM)end elseif UL==\"mouse_click\"then\
if not RL then\
if E==1 then local X,H=O,PJ;if H<NY then\
GM=math.min(math.max(EM+H,1),#QGO)\
RA=math.min(math.max(C+X,1),string.len(QGO[GM])+1)LF(RA,GM)end end end elseif UL==\"mouse_scroll\"then if not RL then\
if E==-1 then if EM>0 then EM=EM-1;AKB()end elseif E==1 then\
local ZL=#QGO- (NY-1)if EM<ZL then EM=EM+1;AKB()end end end elseif\
UL==\"term_resize\"then PN,NY=term.getSize()LF(RA,GM)M()AKB()end end;term.clear()term.setCursorBlink(false)\
term.setCursorPos(1,1)",
}