{
  [ "/bin/drive" ] = "local BO={...}local SF=shell.dir()if BO[1]~=nil then\
SF=shell.resolve(BO[1])end\
if fs.exists(SF)then\
write(fs.getDrive(SF)..\" (\")local M=fs.getFreeSpace(SF)\
if M>1024*1024 then\
print((\
math.floor(M/ (100*1000))/10)..\"MB remaining)\")elseif M>1024 then\
print(math.floor(M/1000)..\"KB remaining)\")else print(M..\"B remaining)\")end else print(\"No such path\")end",
  [ "/bin" ] = true,
  [ "/bin/id" ] = "local Q=nil;local NY={...}if#NY>0 then Q=tostring(NY[1])end\
if Q==nil then\
print(\
\"This is computer #\"..os.getComputerID())local S=os.getComputerLabel()if S then\
print(\"This computer is labelled \\\"\"..S..\"\\\"\")end else local A=disk.hasData(Q)if not A then\
print(\"No disk in drive \"..Q)return end\
print(\"The disk is #\"..disk.getID(Q))local OS=disk.getLabel(Q)if OS then\
print(\"The disk is labelled \\\"\"..OS..\"\\\"\")end end",
  [ "/bin/readlink" ] = "local E={...}\
if#E<1 then error(\"Usage: readlink <LINK>\")end\
local S=fs.getInfo(shell.resolve(E[1])).linkto;if S then print(S)else error(\"Not a link!\")end",
  [ "/bin/mv" ] = "local W={...}if#W<2 then print(\"Usage: mv <source> <destination>\")\
return end\
fs.move(shell.resolve(W[1]),shell.resolve(W[2]))",
  [ "/bin/modprobe" ] = "argv={...}if#argv==0 then\
print(\"Usage: modprobe <module1> [module2] ...\")return end;for i=1,#argv do\
kernel.loadModule(argv[i],false)end",
  [ "/bin/ls" ] = "local A={...}local LH=shell.dir()local AF={}\
if#A>0 then if A[1]:sub(1,1)==\"-\"then\
AF=A[1]else LH=A[1]end;if#A==2 then LH=A[2]end end;local G=false;local FY=false\
for i=2,#AF do if AF:sub(i,i)==\"a\"then G=true end;if AF:sub(i,i)==\
\"l\"then FY=true end end;LH=fs.normalizePath(LH)files=fs.list(LH)local M=0;local BU;for i=1,#files do\
BU=string.len(files[i])if BU>M then M=BU end end;local C=\"-\"local YF=\"\"\
for i=1,#files do\
if(\
files[i]:sub(1,1)~=\".\")or G then if\
fs.isDir(LH..\"/\"..files[i])then\
if term.isColor()then term.setTextColor(colors.blue)end;C=\"d\"end\
if fs.getInfo(LH..\
\"/\"..files[i]).linkto then if term.isColor()then\
term.setTextColor(colors.cyan)end end\
if FY then write(files[i])\
for j=string.len(files[i]),M do write(\" \")end;if fs.getInfo(LH..\"/\"..files[i]).linkto then\
YF=\" -> \"..fs.getInfo(LH..\
\"/\"..files[i]).linkto;C=\"l\"else YF=\"\"end\
print(C,table.concat(fsd.normalizePerms(fsd.getInfo(\
LH..\"/\"..files[i]).perms),\"\"),\" \",users.getUsernameByUID(fsd.getInfo(\
LH..\"/\"..files[i]).owner),YF)else write(files[i]..\" \")end\
if term.isColor()then term.setTextColor(colors.white)end;C=\"-\"YF=\"\"end end;if not FY then print()end",
  [ "/bin/rm" ] = "local XN={...}\
if#XN<1 then print(\"Usage: rm <path>\")return end;local YA=shell.resolve(XN[1])fs.delete(YA)",
  [ "/bin/clear" ] = "term.setBackgroundColor(colors.black)\
term.setTextColor(colors.white)term.clear()term.setCursorPos(1,1)",
  [ "/bin/reboot" ] = "\
if term.isColour()then term.setTextColour(colours.yellow)end;print(\"Goodbye\")\
term.setTextColour(colours.white)sleep(1)os.reboot()",
  [ "/bin/ln" ] = "local FC={...}\
if#FC<2 then error(\"Usage ln <TARGET> <LINK_NAME>\")end\
if\
fs.exists(fs.normalizePath(shell.resolve(FC[2])))then error(\"Link already exists!\")end\
if not\
fs.exists(fs.normalizePath(shell.resolve(FC[1])))then error(\"Target does not exists!\")end\
if\
fs.isDir(fs.normalizePath(shell.resolve(FC[1])))then\
fs.makeDir(fs.normalizePath(shell.resolve(FC[2])))else\
fs.open(fs.normalizePath(shell.resolve(FC[2])),\"w\").close()end\
fs.setNode(shell.resolve(FC[2]),nil,nil,shell.resolve(FC[1]))",
  [ "/bin/cp" ] = "local F={...}if#F<2 then print(\"Usage: cp <source> <destination>\")\
return end\
fs.copy(shell.resolve(F[1]),shell.resolve(F[2]))",
  [ "/PKGINFO.lua" ] = "DEPENDS = {\"uberkernel\", \"corelib\"}\
VERSION = {0, 2, 1}",
  [ "/bin/kill" ] = "argv={...}if#argv==0 then\
print(\"Usage: kill <PID> [TERM|KILL]\")return end;local X,PM\
if#argv==1 then PM=\"KILL\"else PM=argv[2]end;if PM==\"KILL\"then X=2 end;if PM==\"TERM\"then X=1 end\
thread.kill(tonumber(argv[1]),X)",
  [ "/bin/cd" ] = "local TH={...}\
if#TH<1 then print(\"Usage: cd <path>\")return end;local E=shell.resolve(TH[1])if fs.isDir(E)then shell.setDir(E)else\
print(\"Not a directory\")return end",
  [ "/bin/mount" ] = "local ZA={...}if#ZA<3 then\
error(\"Usage: mount <DEV> <FS> <MOUNTPOINT>\")end;local Z=fs.open(ZA[1],\"r\")\
local G=textutils.unserialize(Z.readAll())Z.close()\
fs.mount(\"/\"..G.mounted,ZA[2],ZA[3])",
  [ "/bin/chmod" ] = "local TG={...}if#TG<2 then\
print(\"Usage: chmod <mode> <file1> [file2] ...\")return end\
for i=2,#TG do fsd.setNode(fsd.normalizePath(shell.resolve(TG[i])),\
nil,TG[1])end",
  [ "/bin/shutdown" ] = "\
if term.isColour()then term.setTextColour(colours.yellow)end;print(\"Goodbye\")\
term.setTextColour(colours.white)sleep(1)os.shutdown()",
  [ "/bin/alias" ] = "local VM={...}if#VM>2 then print(\"Usage: alias <alias> <program>\")\
return end;local N=VM[1]local V=VM[2]\
if N and V then\
shell.setAlias(N,V)elseif N then shell.clearAlias(N)else local M=shell.aliases()local VQZ={}for N,JZ in pairs(M)do\
table.insert(VQZ,N)end;table.sort(VQZ)\
textutils.pagedTabulate(VQZ)end",
  [ "/bin/eject" ] = "local F={...}\
if#F==0 then print(\"Usage: eject <drive>\")return end;local EX=F[1]local ID=disk.isPresent(EX)if not ID then\
print(\"Nothing in \"..EX..\" drive\")return end;disk.eject(EX)",
  [ "/bin/ps" ] = "local IS=thread.getRunningThreads()local ZX={}for VL,RV in pairs(IS)do\
table.insert(ZX,{RV.pid,RV.desc,users.getUsernameByUID(RV.uid)})end\
textutils.tabulate({\"PID\",\"CMD\",\"USER\"},unpack(ZX))",
  [ "/bin/chown" ] = "local SU={...}if#SU<2 then\
print(\"Usage: chown <owner> <file1> [file2] ...\")return end;for i=2,#SU do\
fsd.setNode(fsd.normalizePath(shell.resolve(SU[i])),users.getUIDByUsername(SU[1]),\
nil)end",
  [ "/bin/label" ] = "\
local function RI()print(\"Usages:\")print(\"label get\")\
print(\"label get <drive>\")print(\"label set <text>\")\
print(\"label set <drive> <text>\")print(\"label clear\")print(\"label clear <drive>\")end\
local function O(X)\
if peripheral.getType(X)==\"drive\"then local B=disk.hasData(X)\
if not B then print(\
\"No disk in \"..X..\" drive\")return false end else print(\"No disk drive named \"..X)return false end;return true end\
local function IP(P)\
if P~=nil then\
if O(P)then local TKT=disk.getLabel(P)if TKT then\
print(\"Disk label is \\\"\"..TKT..\"\\\"\")else print(\"No Disk label\")end end else local OS=os.getComputerLabel()\
if OS then\
print(\"Computer label is \\\"\"..OS..\"\\\"\")else print(\"No Computer label\")end end end\
local function BX(X,Z)\
if X~=nil then\
if O(X)then disk.setLabel(X,Z)local CF=disk.getLabel(X)if CF then print(\
\"Disk label set to \\\"\"..CF..\"\\\"\")else\
print(\"Disk label cleared\")end end else os.setComputerLabel(Z)local IF=os.getComputerLabel()if IF then print(\
\"Computer label set to \\\"\"..IF..\"\\\"\")else\
print(\"Computer label cleared\")end end end;local H={...}local T=H[1]\
if T==\"get\"then\
if#H==1 then IP(nil)elseif#H==2 then IP(H[2])else RI()end elseif T==\"set\"then\
if#H==2 then BX(nil,H[2])elseif#H==3 then BX(H[2],H[3])else RI()end elseif T==\"clear\"then\
if#H==1 then BX(nil,nil)elseif#H==2 then BX(H[2],nil)else RI()end else RI()end",
  [ "/bin/lua" ] = "local B={...}if#B>0 then\
print(\"This is an interactive Lua prompt.\")print(\"To run a lua program, just type its name.\")\
return end;local U=true;local J={}\
local JN={[\"exit\"]=function()\
U=false end,[\"_echo\"]=function(...)return...end}setmetatable(JN,{__index=getfenv()})\
if\
term.isColour()then term.setTextColour(colours.yellow)end;print(\"Interactive Lua prompt.\")\
print(\"Call exit() to exit.\")term.setTextColour(colours.white)\
while U do write(\"lua> \")local M=read(\
nil,J)table.insert(J,M)local V=0\
local DN,R=loadstring(M,\"lua\")\
local WK,Z=loadstring(\"return _echo(\"..M..\");\",\"lua\")\
if not DN then if WK then DN=WK;R=nil;V=1 end else if WK then DN=WK end end\
if DN then setfenv(DN,JN)local SM={pcall(DN)}\
if SM[1]then local E=1\
while(SM[E+1]~=nil)or(E<=\
V)do local JT=SM[E+1]if type(JT)==\"table\"then\
local O,WN=pcall(textutils.serialise,JT)if O then print(WN)else print(tostring(JT))end else\
print(tostring(JT))end;E=E+1 end else printError(SM[2])end else printError(R)end end",
  [ "/bin/umount" ] = "local O={...}\
if#O<1 then error(\"Usage: umount <PATH>\")end;fs.umountPath(O[1])",
  [ "/bin/mkdir" ] = "local U={...}\
if#U<1 then print(\"Usage: mkdir <path>\")return end;local IT=shell.resolve(U[1])fs.makeDir(IT)",
  [ "/bin/exit" ] = "shell.exit()",
  [ "/bin/log" ] = "shell.run(\"edit /boot/log\")",
  [ "/bin/edit" ] = "local R={...}\
if#R==0 then print(\"Usage: edit <path>\")return end;local OY=shell.resolve(R[1])local S=fs.isReadOnly(OY)if\
fs.exists(OY)and fs.isDir(OY)then\
print(\"Cannot edit a directory.\")return end;local XFG,CO=1,1\
local JZ,AB=term.getSize()local XE,U=0,0;local H={}local UH=true;local WX,AU,DH,EE,P\
if term.isColour()then P=colours.black\
EE=colours.white;WX=colours.yellow;AU=colours.yellow;DH=colours.green\
stringColour=colours.red else P=colours.black;EE=colours.white;WX=colours.white;AU=colours.white\
DH=colours.white;stringColour=colours.white end;local E=false;local RC=1;local CM;if S then CM={\"Exit\",\"Print\"}else\
CM={\"Save\",\"Exit\",\"Print\"}end;local Q=\"Press Ctrl to access menu\"\
local function NK(G)H={}\
if\
fs.exists(G)then local DO=fs.open(G,\"r\")local JF=DO.readLine()while JF do\
table.insert(H,JF)JF=DO.readLine()end;DO.close()end;if#H==0 then table.insert(H,\"\")end end\
local function D(O)\
local EK=OY:sub(1,OY:len()-fs.getName(OY):len())if not fs.exists(EK)then fs.makeDir(EK)end;local KZ=nil\
local function M()\
KZ=fs.open(O,\"w\")if KZ then for SHV,KV in ipairs(H)do KZ.write(KV..\"\\n\")end else\
error(\"Failed to open \"..O)end end;local X=pcall(M)if KZ then KZ.close()end;return X end\
local VA={[\"and\"]=true,[\"break\"]=true,[\"do\"]=true,[\"else\"]=true,[\"elseif\"]=true,[\"end\"]=true,[\"false\"]=true,[\"for\"]=true,[\"function\"]=true,[\"if\"]=true,[\"in\"]=true,[\"local\"]=true,[\"nil\"]=true,[\"not\"]=true,[\"or\"]=true,[\"repeat\"]=true,[\"return\"]=true,[\"then\"]=true,[\"true\"]=true,[\"until\"]=true,[\"while\"]=true}\
local function AYE(HAZ,ZN,PT)local I=string.match(HAZ,ZN)\
if I then\
if type(PT)==\"number\"then\
term.setTextColour(PT)else term.setTextColour(PT(I))end;term.write(I)term.setTextColour(EE)return string.sub(HAZ,\
string.len(I)+1)end;return nil end\
local function DW(Y)\
while string.len(Y)>0 do\
Y=\
\
\
\
\
AYE(Y,\"^%-%-%[%[.-%]%]\",DH)or AYE(Y,\"^%-%-.*\",DH)or AYE(Y,\"^\\\".-[^\\\\]\\\"\",stringColour)or AYE(Y,\"^\\'.-[^\\\\]\\'\",stringColour)or AYE(Y,\"^%[%[.-%]%]\",stringColour)or\
AYE(Y,\"^[%w_]+\",function(W)if VA[W]then return AU end;return EE end)or AYE(Y,\"^[^%w_]\",EE)end end\
local function SB()\
for CO=1,AB-1 do term.setCursorPos(1-XE,CO)term.clearLine()\
local QG=H[CO+U]if QG~=nil then DW(QG)end end;term.setCursorPos(XFG-XE,CO-U)end\
local function CW(V)local EI=H[V]term.setCursorPos(1-XE,V-U)\
term.clearLine()DW(EI)term.setCursorPos(XFG-XE,V-U)end\
local function A()term.setCursorPos(1,AB)term.clearLine()\
term.setCursorPos(JZ-string.len(\
\"Ln \"..CO)+1,AB)term.setTextColour(WX)term.write(\"Ln \")\
term.setTextColour(EE)term.write(CO)term.setCursorPos(1,AB)\
if E then\
term.setTextColour(EE)\
for Z,WB in pairs(CM)do\
if Z==RC then term.setTextColour(WX)term.write(\"[\")\
term.setTextColour(EE)term.write(WB)term.setTextColour(WX)\
term.write(\"]\")term.setTextColour(EE)else\
term.write(\" \"..WB..\" \")end end else term.setTextColour(WX)term.write(Q)\
term.setTextColour(EE)end;term.setCursorPos(XFG-XE,CO-U)end\
local L={Save=function()\
if S then Q=\"Access denied\"else local FZ,GP=D(OY)if FZ then Q=\"Saved to \"..OY else\
Q=\"Error saving to \"..OY end end;A()end,Print=function()\
local YV=peripheral.find(\"printer\")if not YV then Q=\"No printer attached\"return end;local IO=0\
local WZ=fs.getName(OY)\
if YV.getInkLevel()<1 then Q=\"Printer out of ink\"return elseif\
YV.getPaperLevel()<1 then Q=\"Printer out of paper\"return end;local QB=term.current()\
local EIL={getCursorPos=YV.getCursorPos,setCursorPos=YV.setCursorPos,getSize=YV.getPageSize,write=YV.write}\
EIL.scroll=function()if IO==1 then\
YV.setPageTitle(WZ..\" (page \"..IO..\")\")end\
while not YV.newPage()do\
if YV.getInkLevel()<1 then\
Q=\"Printer out of ink, please refill\"elseif YV.getPaperLevel()<1 then Q=\"Printer out of paper, please refill\"else\
Q=\"Printer output tray full, please empty\"end;term.redirect(QB)A()term.redirect(EIL)\
local AOE=os.startTimer(0.5)sleep(0.5)end;IO=IO+1;if IO==1 then YV.setPageTitle(WZ)else\
YV.setPageTitle(WZ..\" (page \"..IO..\")\")end end;E=false;term.redirect(EIL)\
local PJ,W=pcall(function()term.scroll()for T,O in ipairs(H)do\
print(O)end end)term.redirect(QB)if not PJ then print(W)end;while not YV.endPage()do\
Q=\"Printer output tray full, please empty\"A()sleep(0.5)end;E=true\
if IO>1 then Q=\"Printed \"..IO..\
\" Pages\"else Q=\"Printed 1 Page\"end;A()end,Exit=function()\
UH=false end}local function GI(N)L[CM[N]]()\
if E then E=false;term.setCursorBlink(true)end;A()end\
local function KB(XFG,CO)local O=XFG-XE;local HH=CO-U\
local I=false\
if O<1 then XE=XFG-1;O=1;I=true elseif O>JZ then XE=XFG-JZ;O=JZ;I=true end\
if HH<1 then U=CO-1;HH=1;I=true elseif HH>AB-1 then U=CO- (AB-1)HH=AB-1;I=true end;if I then SB()end;term.setCursorPos(O,HH)A()end;NK(OY)term.setBackgroundColour(P)term.clear()\
term.setCursorPos(XFG,CO)term.setCursorBlink(true)SB()A()\
while UH do\
local NH,UDT,I,W=os.pullEvent()\
if NH==\"key\"then\
if UDT==keys.up then\
if not E then if CO>1 then CO=CO-1\
XFG=math.min(XFG,string.len(H[CO])+1)KB(XFG,CO)end end elseif UDT==keys.down then\
if not E then if CO<#H then CO=CO+1\
XFG=math.min(XFG,string.len(H[CO])+1)KB(XFG,CO)end end elseif UDT==keys.tab then if not E and not S then H[CO]=\"  \"..H[CO]XFG=XFG+2\
KB(XFG,CO)CW(CO)end elseif UDT==keys.pageUp then\
if not E then if\
CO- (AB-1)>=1 then CO=CO- (AB-1)else CO=1 end;XFG=math.min(XFG,\
string.len(H[CO])+1)KB(XFG,CO)end elseif UDT==keys.pageDown then if not E then\
if CO+ (AB-1)<=#H then CO=CO+ (AB-1)else CO=#H end;XFG=math.min(XFG,string.len(H[CO])+1)\
KB(XFG,CO)end elseif UDT==keys.home then if\
not E then XFG=1;KB(XFG,CO)end elseif UDT==keys[\"end\"]then if not E then XFG=\
string.len(H[CO])+1;KB(XFG,CO)end elseif\
UDT==keys.left then\
if not E then if XFG>1 then XFG=XFG-1 elseif XFG==1 and CO>1 then\
XFG=string.len(H[CO-1])+1;CO=CO-1 end;KB(XFG,CO)else RC=RC-1;if RC<\
1 then RC=#CM end;A()end elseif UDT==keys.right then\
if not E then\
if XFG<string.len(H[CO])+1 then XFG=XFG+1 elseif XFG==\
string.len(H[CO])+1 and CO<#H then XFG=1;CO=CO+1 end;KB(XFG,CO)else RC=RC+1;if RC>#CM then RC=1 end;A()end elseif UDT==keys.delete then\
if not E and not S then table.remove(H,CO)CO=CO-1;SB()end elseif UDT==keys.backspace then\
if not E and not S then\
if XFG>1 then local M=H[CO]H[CO]=\
string.sub(M,1,XFG-2)..string.sub(M,XFG)CW(CO)\
XFG=XFG-1;KB(XFG,CO)elseif CO>1 then local AA=string.len(H[CO-1])\
H[CO-1]=H[CO-1]..H[CO]table.remove(H,CO)SB()XFG=AA+1;CO=CO-1;KB(XFG,CO)end end elseif UDT==keys.enter then\
if not E and not S then local FW=H[CO]\
local G,IH=string.find(FW,\"^[ ]+\")if not IH then IH=0 end;H[CO]=string.sub(FW,1,XFG-1)\
table.insert(H,CO+1,\
string.rep(' ',IH)..string.sub(FW,XFG))SB()XFG=IH+1;CO=CO+1;KB(XFG,CO)elseif E then GI(RC)end elseif UDT==keys.leftCtrl or UDT==keys.rightCtrl then E=not E;if E then\
term.setCursorBlink(false)else term.setCursorBlink(true)end\
A()end elseif NH==\"char\"then\
if not E and not S then local KU=H[CO]H[CO]=string.sub(KU,1,XFG-1)..UDT..\
string.sub(KU,XFG)CW(CO)\
XFG=XFG+1;KB(XFG,CO)elseif E then for JZM,IFS in ipairs(CM)do\
if string.lower(string.sub(IFS,1,1))==\
string.lower(UDT)then GI(JZM)break end end end elseif NH==\"paste\"then\
if not E and not S then local K=H[CO]H[CO]=string.sub(K,1,XFG-1)..UDT..\
string.sub(K,XFG)CW(CO)XFG=XFG+\
string.len(UDT)KB(XFG,CO)end elseif NH==\"mouse_click\"then\
if not E then\
if UDT==1 then local Y,SM=I,W;if SM<AB then\
CO=math.min(math.max(U+SM,1),#H)\
XFG=math.min(math.max(XE+Y,1),string.len(H[CO])+1)KB(XFG,CO)end end end elseif NH==\"mouse_scroll\"then if not E then\
if UDT==-1 then if U>0 then U=U-1;SB()end elseif UDT==1 then\
local AQ=#H- (AB-1)if U<AQ then U=U+1;SB()end end end elseif\
NH==\"term_resize\"then JZ,AB=term.getSize()KB(XFG,CO)A()SB()end end;term.clear()term.setCursorBlink(false)\
term.setCursorPos(1,1)",
}